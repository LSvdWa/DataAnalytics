import pandas as pdimport plotly.graph_objects as goimport plotly.express as pxfrom dash import Dash, html, dcc, Input, Output# read the csv and make it a pandas.DataFrameframe = pd.DataFrame(pd.read_csv("./airlinedelaycauses_DelayedFlights.zip"))frame.describe(include='all')# 30 columns, 11 rows# 5 object columns: UniqueCarrier, TailNum, Origin, Dest, CancellationCode# 25 numeric columns# objects = ['UniqueCarrier', 'TailNum', 'Origin', 'Dest', 'CancellationCode']# numerics = ['Unnamed: 0', 'Year', 'Month', 'DayOfMonth', 'DayOfWeek', 'DepTime', 'CRSDepTime', 'ArrTime',#       'CRSArrTime', 'FlightNum', 'ActualElapsedTime', 'CRSElapsedTime', 'AirTime', 'ArrDelay', 'DepDelay', 'Distance',#       'TaxiIn', 'TaxiOut', 'Cancelled', 'Diverted', 'CarrierDelay', 'WeatherDelay', 'NASDelay', 'SecurityDelay',#       'LateAircraftDelay']us_cities = pd.read_csv("./airports.csv")iataCodes = list(us_cities['iata_code'].dropna().unique())dictio = {}for i, j in enumerate(us_cities['iata_code']):    if len(iataCodes) < 1:        break    if j in iataCodes:        dictio[j] = (us_cities['latitude_deg'][i], us_cities['longitude_deg'][i], j)        iataCodes.remove(j)framew = (pd.DataFrame(dictio))framew.rename(index={0: 'latitude', 1: 'longitude', 2: 'airport'}, inplace=True)nframe = framew.transpose()# === SAMPLE DATA ===# flights without duplicates, to make drawing fasterflights = frame.copy()df_merged = (pd.merge(flights, nframe, left_on='Origin', right_on='airport', how='left')             .rename(columns={'latitude': 'Origin_Latitude', 'longitude': 'Origin_Longitude'})             .drop(columns='airport'))df_mergedDest = (pd.merge(df_merged, nframe, left_on='Dest', right_on='airport', how='left')                 .rename(columns={'latitude': 'Dest_Latitude', 'longitude': 'Dest_Longitude'})                 .drop(columns='airport'))df = (df_mergedDest[['Origin', 'Dest', 'Origin_Latitude', 'Origin_Longitude', 'Dest_Latitude', 'Dest_Longitude']]      .drop_duplicates())counts = df_mergedDest[['Dest_Latitude', 'Dest_Longitude']].value_counts().reset_index(name='count')counts = counts.merge(df_mergedDest[['Origin', 'Dest_Latitude', 'Dest_Longitude']],                      on=['Dest_Latitude', 'Dest_Longitude'],                      how='left')fig_heat = px.density_map(    counts,    lat="Dest_Latitude",    lon="Dest_Longitude",    z="count",    zoom=2,    title="World Heatmap (Density Map)",    radius=15,    opacity=0.8,    color_continuous_scale="Viridis",    map_style="carto-positron")# === DASH APP ===app = Dash(__name__)app.layout = html.Div([    html.H1("✈️ Interactive Global Flight Map", style={'textAlign': 'center'}),    html.Div([        html.Label("Search Origin Airport:"),        dcc.Dropdown(            id='origin-filter',            options=[{'label': i, 'value': i} for i in sorted(df['Origin'].unique())],            placeholder="Select Origin...",            style={'width': '45%', 'display': 'inline-block', 'marginRight': '2%'}        ),    ], style={'textAlign': 'center', 'marginBottom': '20px'}),    html.Div([        html.Label("Search Destination Airport:"),        dcc.Dropdown(            id='dest-filter',            options=[{'label': i, 'value': i} for i in sorted(df['Dest'].unique())],            placeholder="Select Destination...",            style={'width': '45%', 'display': 'inline-block'}        ),    ], style={'textAlign': 'center', 'marginBottom': '20px'}),    dcc.Graph(id='flight-map', style={'height': '85vh'}),    html.H1("Select Flight path", style={'textAlign': 'center'}),    html.Div([        html.Label("Search Origin Airport:"),        dcc.Dropdown(            id='origin-filter2',            options=[{'label': i, 'value': i} for i in sorted(df['Origin'].unique())],            placeholder="Select Origin...",            style={'width': '45%', 'display': 'inline-block', 'marginRight': '2%'}        ),    ], style={'textAlign': 'center', 'marginBottom': '20px'}),    html.Div([        html.Label("Search Destination Airport:"),        dcc.Dropdown(            id='dest-filter2',            options=[{'label': i, 'value': i} for i in sorted(df['Dest'].unique())],            placeholder="Select Destination...",            style={'width': '45%', 'display': 'inline-block'}        ),    ], style={'textAlign': 'center', 'marginBottom': '20px'}),    dcc.Graph(id='delay-map', style={'height': '85vh'}),    html.Hr(),    html.H2("World Heatmap (Separate Map)"),    dcc.Graph(id="world-heatmap", figure=fig_heat)])@app.callback(    Output('flight-map', 'figure'),    [Input('origin-filter', 'value'),     Input('dest-filter', 'value')])def update_map(selected_origin, selected_dest):    dff = df.copy()    if selected_origin:        dff = dff[dff['Origin'] == selected_origin]    if selected_dest:        dff = dff[dff['Dest'] == selected_dest]    fig = go.Figure()    for _, row in dff.iterrows():        fig.add_trace(go.Scattergeo(            lon=[row['Origin_Longitude'], row['Dest_Longitude']],            lat=[row['Origin_Latitude'], row['Dest_Latitude']],            mode='lines',            line=dict(width=2, color='blue'),            opacity=0.4,            hoverinfo='text',            text=f"{row['Origin']} → {row['Dest']}"        ))    all_airports = pd.concat([        df[['Origin', 'Origin_Latitude', 'Origin_Longitude']].rename(columns={            'Origin': 'Code', 'Origin_Latitude': 'Latitude', 'Origin_Longitude': 'Longitude'        }),        df[['Dest', 'Dest_Latitude', 'Dest_Longitude']].rename(columns={            'Dest': 'Code', 'Dest_Latitude': 'Latitude', 'Dest_Longitude': 'Longitude'        })    ]).drop_duplicates(subset='Code')    fig.add_trace(go.Scattergeo(        lon=all_airports['Longitude'],        lat=all_airports['Latitude'],        mode='markers',        marker=dict(size=5, color='red', opacity=0.7),        text=all_airports['Code'],        hoverinfo='text',        name='Airports'    ))    fig.update_layout(        title=f"🌍 Flight Routes ({len(dff)} routes)",        showlegend=False,        geo=dict(            projection_type='natural earth',            showland=True,            landcolor='rgb(243,243,243)',            countrycolor='rgb(204,204,204)'        ),        margin=dict(l=0, r=0, t=50, b=0)    )    return fig@app.callback(    Output('delay-map', 'figure'),    [Input('origin-filter2', 'value'),     Input('dest-filter2', 'value')])def update_map(selected_origin, selected_dest):    df_delay = df.copy()    if selected_origin:        df_delay = df_delay[df_delay['Origin'] == selected_origin]    if selected_dest:        df_delay = df_delay[df_delay['Dest'] == selected_dest]    fig = go.Figure()    for _, row in df_delay.iterrows():        fig.add_trace(go.Scattergeo(            lon=[row['Origin_Longitude'], row['Dest_Longitude']],            lat=[row['Origin_Latitude'], row['Dest_Latitude']],            mode='markers',            opacity=0.4,            hoverinfo='text',            text=f"{row['Origin']} → {row['Dest']}"        ))    if selected_origin and selected_dest:        origin_row = df_delay.iloc[0]        fig.add_trace(go.Scattergeo(            lon=[origin_row['Origin_Longitude'], origin_row['Dest_Longitude']],            lat=[origin_row['Origin_Latitude'], origin_row['Dest_Latitude']],            mode='lines',            line=dict(width=2, color='blue'),            opacity=0.7,            hoverinfo='text',            text=f"{row['Origin']} → {row['Dest']}"        ))    all_airports = pd.concat([        df[['Origin', 'Origin_Latitude', 'Origin_Longitude']].rename(columns={            'Origin': 'Code', 'Origin_Latitude': 'Latitude', 'Origin_Longitude': 'Longitude'        }),        df[['Dest', 'Dest_Latitude', 'Dest_Longitude']].rename(columns={            'Dest': 'Code', 'Dest_Latitude': 'Latitude', 'Dest_Longitude': 'Longitude'        })    ]).drop_duplicates(subset='Code')    fig.add_trace(go.Scattergeo(        lon=all_airports['Longitude'],        lat=all_airports['Latitude'],        mode='markers',        marker=dict(size=5, color='red', opacity=0.7),        text=all_airports['Code'],        hoverinfo='text',        name='Airports'    ))    fig.update_layout(        title=f"🌍 Flight Routes ({len(df_delay)} routes)",        showlegend=False,        geo=dict(            projection_type='natural earth',            showland=True,            landcolor='rgb(243,243,243)',            countrycolor='rgb(204,204,204)'        ),        margin=dict(l=0, r=0, t=50, b=0)    )    return fig@app.callback(    Output('delay-pieChart', 'figure'),    [Input('origin-filter2', 'value'),     Input('dest-filter2', 'value')])def update_delay_map(selected_origin, selected_dest):    df_delay = df.copy()"""@app.callback(    Output('world-heatmap', 'figure'),    [Input('origin-filter', 'value'),     Input('dest-filter', 'value')])def update_heatmap(selected_origin, selected_dest):    filtered = counts[        counts['origins'].apply(lambda x: selected_origin in x if selected_origin else True) &        counts['destinations'].apply(lambda x: selected_dest in x if selected_dest else True)        ].copy()    fig = px.density_mapbox(        filtered,        lat="latitude",        lon="longitude",        z="count_adj",        radius=25,        color_continuous_scale="Turbo",        mapbox_style="open-street-map",        zoom=1,        center=dict(lat=0, lon=0),        title=f"Heatmap (Min Count ≥ {min_count})"    )    return fig"""app.run(debug=True, use_reloader=False, port=2028)