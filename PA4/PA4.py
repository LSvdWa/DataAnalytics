import pandas as pd# read the csv and make it a pandas.DataFrameframe = pd.DataFrame(pd.read_csv("./airlinedelaycauses_DelayedFlights.zip"))frame.describe(include='all')# 30 columns, 11 rows# 5 object columns: UniqueCarrier, TailNum, Origin, Dest, CancellationCode# 25 numeric columnsobjects = ['UniqueCarrier', 'TailNum', 'Origin', 'Dest', 'CancellationCode']numerics = ['Unnamed: 0', 'Year', 'Month', 'DayOfMonth', 'DayOfWeek', 'DepTime', 'CRSDepTime', 'ArrTime', 'CRSArrTime', 'FlightNum', 'ActualElapsedTime', 'CRSElapsedTime', 'AirTime', 'ArrDelay', 'DepDelay', 'Distance', 'TaxiIn', 'TaxiOut', 'Cancelled', 'Diverted', 'CarrierDelay', 'WeatherDelay', 'NASDelay', 'SecurityDelay', 'LateAircraftDelay']"""# werkt nog nietimport plotly.express as pxfor i in range(len(numerics)):    for j in range(len(numerics)-i):        fig = px.scatter(frame, x=frame[f"{numerics[i]}"], y=frame.numerics[i+j])        fig.update_layout(title_text=f"{numerics[i]} & {numerics[i+j]}", title_x=numerics[i], title_y=numerics[i+j])        fig.show()"""import pandas as pdimport numpy as npus_cities = pd.read_csv("./airports.csv")codes = list(us_cities['iata_code'].dropna().unique())dictio = {}for i,j in enumerate(us_cities['iata_code']):    if len(codes) < 1:        break    if j in codes:        dictio[j] = (us_cities['latitude_deg'][i], us_cities['longitude_deg'][i], j)        codes.remove(j)framew = (pd.DataFrame(dictio))framew.rename(index={0: 'latitude', 1: 'longitude', 2:'airport'}, inplace=True)nframe = framew.transpose()import pandas as pdimport plotly.graph_objects as gofrom dash import Dash, html, dcc, Input, Output# === SAMPLE DATA ===# Your data should have these columns: Origin, Dest, Origin_Latitude, Origin_Longitude, Dest_Latitude, Dest_Longitudeflights = framedf_merged = pd.merge(    flights,    nframe,    left_on='Origin', right_on='airport',    how='left')df_merged = df_merged.rename(columns={    'latitude': 'Origin_Latitude',    'longitude': 'Origin_Longitude'}).drop(columns='airport')df_mergedDest = pd.merge(    df_merged,    nframe,    left_on='Dest', right_on='airport',    how='left')df_mergedDest = df_mergedDest.rename(columns={    'latitude': 'Dest_Latitude',    'longitude': 'Dest_Longitude'}).drop(columns='airport')print(df_mergedDest)df = df_mergedDest[:10000]# === DASH APP ===app = Dash(__name__)app.layout = html.Div([    html.H1("✈️ Interactive Global Flight Map", style={'textAlign': 'center'}),    html.Div([        html.Label("Search Origin Airport:"),        dcc.Dropdown(            id='origin-filter',            options=[{'label': i, 'value': i} for i in sorted(df['Origin'].unique())],            placeholder="Select Origin...",            style={'width': '45%', 'display': 'inline-block', 'marginRight': '2%'}        ),        html.Label("Search Destination Airport:"),        dcc.Dropdown(            id='dest-filter',            options=[{'label': i, 'value': i} for i in sorted(df['Dest'].unique())],            placeholder="Select Destination...",            style={'width': '45%', 'display': 'inline-block'}        ),    ], style={'textAlign': 'center', 'marginBottom': '20px'}),    dcc.Graph(id='flight-map', style={'height': '85vh'})])@app.callback(    Output('flight-map', 'figure'),    [Input('origin-filter', 'value'),     Input('dest-filter', 'value')])def update_map(selected_origin, selected_dest):    dff = df.copy()    if selected_origin:        dff = dff[dff['Origin'] == selected_origin]    if selected_dest:        dff = dff[dff['Dest'] == selected_dest]    fig = go.Figure()    lanlon = []    for _, row in dff.iterrows():        fig.add_trace(go.Scattergeo(            lon=[row['Origin_Longitude'], row['Dest_Longitude']],            lat=[row['Origin_Latitude'], row['Dest_Latitude']],            mode='lines',            line=dict(width=2, color='blue'),            opacity=0.4,            hoverinfo='text',            text=f"{row['Origin']} → {row['Dest']}"        ))    unique_airports = pd.concat([        dff[['Origin', 'Origin_Latitude', 'Origin_Longitude']].rename(columns={            'Origin': 'Code', 'Origin_Latitude': 'Latitude', 'Origin_Longitude': 'Longitude'        }),        dff[['Dest', 'Dest_Latitude', 'Dest_Longitude']].rename(columns={            'Dest': 'Code', 'Dest_Latitude': 'Latitude', 'Dest_Longitude': 'Longitude'        })    ]).drop_duplicates(subset='Code')    fig.add_trace(go.Scattergeo(        lon=unique_airports['Longitude'],        lat=unique_airports['Latitude'],        mode='markers',        marker=dict(size=6, color='red'),        text=unique_airports['Code'],        hoverinfo='text'    ))    fig.update_layout(        title=f"🌍 Flight Routes ({len(dff)} routes)",        showlegend=False,        geo=dict(            projection_type='natural earth',            showland=True,            landcolor='rgb(243,243,243)',            countrycolor='rgb(204,204,204)'        ),        margin=dict(l=0, r=0, t=50, b=0)    )    return figapp.run(debug=True, use_reloader=False)